---
title: "Aquatic Habitat Types: Observation Well Placement"
date: "2025-05-20"
format:
  html:
    toc: true
    html-math-method: katex
    code-fold: false
    embed-resources: true
knitr:
  opts_chunk:
    echo: true
---



```{r libraries}

void <- suppressPackageStartupMessages

conflictRules("n2khab", exclude = c("read_schemes", "read_scheme_types"))
library("stringr")     |> void() # string ragging
library("dplyr")       |> void() # our favorite data wrangling toolbox
library("tidyr")       |> void() # data preparation and rearrangement
library("googledrive") |> void() # google drive data to/fro
library("inbospatial") |> void() # convenience functions for wfs and other queries
library("sf")          |> void() # spatial feature processing
library("terra")       |> void() # spatial raster data
# library("qgisprocess") |> void() # interface to the procedures of our favorite GIS software
library("mapview")     |> void() # show spatial features on a map
library("n2khab")      |> void() # n2khab data and common functions
library("n2khabmon")   |> void() # monitoring schemes for natura2000 habitats

# print sample from sf objects
kableprint <- function(df, show_rows = 5) {
  knitr::kable(df[sample(1:nrow(df), show_rows), ])
}

mapviewOptions(fgb = FALSE) # https://stackoverflow.com/a/65485896


# assert crs 31370
assert_31370 <- function(sf_obj){
  stopifnot(
    "crs 31370" = format(sf::st_crs(sf_obj)) == "BD72 / Belgian Lambert 72"
  )
  return(sf_obj)
}
```

# REMINDER

- `unit_id` is not strictly unique; make sure to filter for `sample_support_code`+`unit_id` always!


# strategy:


## procedural:

- (i) get sample locations
- (ii) get aquatic bodies
  - surfs, streams, springs
  - ensure 31370
  - buffers: r₁ = 20m, r₂ = 40m
- target distance from surface water edge: r = 30m
- query dhmv(xᵢ | 1m resolution) ∀ xᵢ < r₂
  - calculate gradient direction
  - take wedge of α=π/8
  - complication: Flanders is flat; optionally query a wider range


## special situation:

- stream into/out of surface water body


## cases:

- sample x ⊂ r₁ ⇒ place anywhere around
- sample r₁ < x < r ⇒ move to target distance r


## exploration:

- filter an example area/location


## complication anticipation:

- Flanders is relatively flat
- water redistributes under the influence of gravity

⇒ elevation gradient below detection limit?


# data

## Assembling Aquatic Habitat Types

### data consistence

```{r datasource-consistency}
#' data source version persistence
#'
#' Manually check data source versions (something to be automated by n2khab
#' package in the future, based on preset versions)
#'
confirm_n2khab_data_consistency <- function() {

  # required for the pipe operator 
  stopifnot("magrittr" = require("magrittr"))

  # the checksums of working data versions (as of 20250501)
  # - watersurfaces_hab: version watersurfaces_hab_v6
  # - habitatstreams: version habitatstreams_2023
  # - habitatsprings: version habitatsprings_2020v2
  # - flanders: version "flanders_2018-05-16"
  reference_checksum <- c(
    flanders.dbf = "d21a599325723682",
    flanders.prj = "2f10404ffd869596",
    flanders.shp = "72fff53084b356be",
    flanders.shx = "1880e141bbcdc6ca",
    habitatsprings.geojson = "7268c26f52fcefe4",
    habitatstreams.dbf = "dee7a620e3bcae0a",
    habitatstreams.lyr = "a120f92d80c92a3a",
    habitatstreams.prj = "7e64ff1751a50937",
    habitatstreams.shp = "5a7d7cddcc52c5df",
    habitatstreams.shx = "b2087e6affe744f4",
    habitatstreams.sld = "2f192b84b4df99e9",
    watersurfaces_hab.gpkg = "e2920c4932008387"
  )
    
  # for comparison: checksums of current files on disk
  status_checksum <- file.path(
      n2khab::locate_n2khab_data(),
      c(
        "20_processed/watersurfaces_hab",
        "10_raw/habitatsprings",
        "10_raw/habitatstreams",
        "10_raw/flanders"
      )
    ) %>%
    list.files(full.names = TRUE) %>%
    n2khab::xxh64sum()
    
  # per filename, check whether checksums match
  check_identical_checksum <- function (filename) {

    # the check
    file_check <- identical(
        reference_checksum[filename],
        status_checksum[filename]
      )

    # more verbose error upon mismatch
    if (!file_check) {
      message(paste0(
        "ERROR: file `",
        filename,
        "` changed on disk.",
        collapse = "") )
      }

    # stop or return TRUE
    return(is.null(
      stopifnot(file_check)
    ))
    
  }

  # check all files
  check <- all(sapply(names(reference_checksum), FUN = check_identical_checksum))

  # confirm correctness of all n2khab data files
  if (check) message("All n2khab data files match the recorded state.")
  
} # /confirm_n2khab_data_consistency


# apply the function
confirm_n2khab_data_consistency()

```


### watersurfaces present in the n2khab type list

```{r load-watersurface-habitats}

# reading scheme and type of target populations
n2khab_targetpops <-
  read_scheme_types() %>%
  select(scheme, type)

# list of distinct types
n2khab_types <-
  n2khab_targetpops %>%
  distinct(type) %>%
  arrange(type)

# `wsh` are the polygons that contain standing water types
# (cf. https://inbo.github.io/n2khab/reference/read_watersurfaces_hab.html, https://doi.org/10.21436/inbor.114075267)
wsh <- read_watersurfaces_hab(interpreted = TRUE)

# we are interested in the types which are part of the n2khab monitoring list
wsh_occ <-
  wsh$watersurfaces_types %>%
  # in general we restrict types using an expanded type list tailored to the
  # type levels present in data sources, but for the aquatic types expansion and
  # subsequent collapse of types are redundant steps
  semi_join(n2khab_types, join_by(type))

# of the focus-type watersurface polygons, we extract the polygon id
wsh_pol <-
  wsh$watersurfaces_polygons %>%
  semi_join(wsh_occ, join_by(polygon_id)) %>%
  select(polygon_id)

kableprint(wsh_pol) # polygon id of the watersurface polygons of interest
```


### Streams

Temporary approach to generate `segm_3260` (i.e. it will miss a part and some may be false positives)
(unit ID defined by `unit_id`)

```{r load-streams}
# read_watercourse_100mseg(element = "lines")[habstream, ] %>%
#   mapview()
# read_watercourse_100mseg(element = "points")[habstream, ] %>% 
#   mapview()
# read_habitatstreams() %>%
#   mapview()

# habitat 3260 from
#     Biologische Waarderingskaart en Natura 2000 Habitatkaart
#     https://doi.org/10.21436/inbor.96375305
# ... are the streams
habstream <- read_habitatstreams()

# for those streams, we use the 100m line segments
# applying spatial supsetting (intersect!) with sf_x[sf_y, ]
#   not well documented in https://r-spatial.github.io/sf/reference/sf.html
#   -> geocomputation with R https://r.geocompx.org/spatial-operations#spatial-subsetting
#   habstream <- read_habitatstreams()
#   seg_all <- read_watercourse_100mseg(element = "lines")
#   seg_reference <- seg_all[habstream, , op = sf::st_intersects]
#   seg_test <- seg_all[lengths(sf::st_intersects(seg_all, habstream, sparse = TRUE)) > 0, ]
#   identical(seg_reference, seg_test)
segm_3260 <-
  read_watercourse_100mseg(element = "lines")[habstream, ] %>%
  unite(unit_id, vhag_code, rank) # tidyr::unite string concatenation

kableprint(segm_3260) # unique identifier for line segments

```


### Springs
Generating `habspring_units_aquatic` (unit ID defined by `unit_id`)

```{r load-springs}

# creating a buffered version of Flanders
flanders_buffer <-
  read_admin_areas(dsn = "flanders") %>%
  st_buffer(40) # units: meter

# read in the spring habitat source
habspring_units_aquatic <-
  # following function will be adapted to support the latest version of the data
  # source (just released); for now use version habitatsprings_2020v2
  read_habitatsprings(units_7220 = TRUE) %>%
  # filtering for the spatial intersect with Flanders
  .[flanders_buffer, ] %>%
  # and excluding "mire" type
  filter(system_type != "mire")

# all spring locations (note: full data, not just ID)
kableprint(habspring_units_aquatic)
```


## load the sample


### google authentification

Currently, the latest version of the sample is distributed via an `.RData` file on the google drive.

```{r google-auth}
# Setup for googledrive authentication. Set the appropriate env vars in
# .Renviron and make sure you ran drive_auth() interactively with these settings
# for the first run (or to renew an expired Oauth token).
# See ?gargle::gargle_options for more information.
google_drive_init <- function() {
  if (Sys.getenv("GARGLE_OAUTH_EMAIL") != "") {
    options(gargle_oauth_email = Sys.getenv("GARGLE_OAUTH_EMAIL"))
  }
  if (Sys.getenv("GARGLE_OAUTH_CACHE") != "") {
    options(gargle_oauth_cache = Sys.getenv("GARGLE_OAUTH_CACHE"))
  }
}

# tipps for paranoid linux terminal users (non-interactive R):
# - point your oauth cache to a tomb https://dyne.org/tomb
# - do not forget to open the tomb prior to starting the R session

google_drive_init()
```



### load/restore sample data

Download the sample data (unless it is already there).

```{r sample-data-download}
# latest (20250506):
#   target_sample_filepath <- file.path("./data", "objects_for_aq_piezometers_panfl_pan5.RData")
#   googledrive::as_id("1Z93w-C3XRQ8756W3835JPfxggGEstjKR"),


force_reload_sample <- FALSE
target_sample_filepath <- file.path("./data", "objects_for_aq_piezometers_panfl_pan5.RData")

if (force_reload_sample || !file.exists(target_sample_filepath)) {
  googledrive::drive_download(
    googledrive::as_id("1Z93w-C3XRQ8756W3835JPfxggGEstjKR"),
    path = target_sample_filepath,
    overwrite = TRUE
  )
}

# deprecated: 
#   target_sample_filepath <- file.path("./data", "objects_for_aq_piezometers_panfl_pan5.RData")
#   googledrive::as_id("1Z93w-C3XRQ8756W3835JPfxggGEstjKR"),
#   target_sample_filepath <- file.path("./data", "objects_panflpan5.RData")
#   googledrive::as_id("1a42qESF5L8tfnEseHXbTn9hYR1phqS-S"),


# load the data into a new environment
env_extradata <- new.env()
load(target_sample_filepath, envir = env_extradata)
ls(envir = env_extradata)

for (var in c(
  "units_non_cell_n2khab_grts",
  "stratum_units_non_cell_n2khab",
  "scheme_moco_ps_stratum_sppost_spsamples_spares_sf"
  )) {
  tryCatch(
  {stopifnot(exists(var, envir = env_extradata))},
  error = function(wrnmsg) {
    message(paste0(
      "The variable ", var,
      " does not exist in environment `env_extradata`.",
      collapse = "")
    )
  }
  )
}

```

(adjusted to read full POC `.RData`, [see here](https://github.com/inbo/n2khab-mne-design/blob/7a08ab9d36669d3a5b64d12b8bc35ff7c7a6a5d1/100_design_common/010_prototyping_sampling_and_revisit_design/helper_scripts/support_dcp_and_fieldwork.R))


restore sample data structure
Below object can be used to filter the foregoing geospatial objects, taking
into account that: rows with ...

- `sample_support_code == watersurface` relate to the IDs in `wsh_pol`
- `sample_support_code == watercourse_segment` relate to the IDs in `segm_3260`
- `sample_support_code == spring` relate to the IDs in `habspring_units_aquatic`

```{r sample-data-join}

stratum_units_grts_aquatic_gw_spsamples_spares <-
  # units per stratum:
  get("stratum_units_non_cell_n2khab", envir = env_extradata) %>%
  # joining GRTS address per unit. A few non-unique GRTS addresses exist, hence
  # 'many-to-one'. See further.
  inner_join(
    get("units_non_cell_n2khab_grts", envir = env_extradata),
    join_by(sample_support_code, unit_id),
    relationship = "many-to-one",
    unmatched = "error"
  ) %>%
  filter(
    # other 'non-cell' types exist so these must be dropped:
    sample_support_code %in% c(
      "watersurface",
      "watercourse_segment",
      "spring"
    ),
    # terrestrial spring units must also be excluded:
    unit_id %in% habspring_units_aquatic$unit_id |
      sample_support_code != "spring"
  ) %>%
  rename(grts_address_final = grts_address) %>%
  # join with samples ('sample_status' defines whether location is 'in the
  # sample' or is a 'spare unit' (spare units = a bunch of 'next' GRTS addresses
  # in the available GRTS series for a stratum))
  inner_join(
    get(
      "scheme_moco_ps_stratum_sppost_spsamples_spares_sf",
      envir = env_extradata
    ) %>%
      st_drop_geometry() %>% # geom will be used below
      # only use the samples of groundwater schemes
      filter(str_detect(scheme, "^GW")) %>%
      rename(grts_address_drawn = grts_address) %>%
      # collapse module combos and schemes; hereby select the 'prior'
      # sample_status ("in_sample") across module combos and schemes:
      summarize(
        sample_status = sample_status %>% droplevels() %>% levels() %>%  first(),
        .by = c(
          stratum,
          grts_address_drawn,
          grts_address_final
        )
      ) %>%
      mutate(sample_status = factor(sample_status)),
    join_by(stratum, grts_address_final),
    # A few non-unique GRTS addresses exist, hence 'many-to-one'. We will apply
    # a quick-fix below to meet the requirement of 'one unit sampled per GRTS
    # address', but at least the selection will need further alignment with the
    # (likewise) MHQ solution (to be continued).
    relationship = "many-to-one",
    unmatched = "drop"
  ) %>%
  arrange(sample_support_code, stratum, grts_address_drawn, unit_id) %>%
  # for now, de-duplicate units with the same GRTS address by selecting the 1st
  slice(1, .by = c(stratum, sample_support_code, grts_address_final)) %>%
  select(-grts_address_drawn)


# grts address and stratum of all units which are in the target category
# (i.e. "watersurface", "watercourse_segment", "non-terrestrial spring")
kableprint(stratum_units_grts_aquatic_gw_spsamples_spares)

```


::: {.callout-caution}
REMINDER:
we de-duplicated units with the same GRTS address by selecting the 1st.
:::


This was an erroneous attempt: `scheme_moco_ps_stratum_sppost_spsamples_spares_sf` is an sf object, but it refers to centres of the GRTS grid. 
Instead, we would prefer to work on centroids of the water surface polygons

```{r recover-geometry-obsolete}
#| eval: false

geometry_link <- get(
    "scheme_moco_ps_stratum_sppost_spsamples_spares_sf",
    envir = env_extradata
  ) %>%
  assert_31370() %>% 
  select(grts_address) %>%
  distinct

data_obsolete <- geometry_link %>%
  right_join(
    stratum_units_grts_aquatic_gw_spsamples_spares,
  by = join_by(grts_address == grts_address_final),
  relationship = "one-to-many",
  unmatched = "drop"
  )

# mapview(data_obsolete)

# for comparison
data_pol <- data_obsolete %>%
  sf::st_drop_geometry() %>%
  inner_join(
    wsh_pol,
    join_by(unit_id == polygon_id),
    relationship = "many-to-many",
    unmatched = "drop"
  ) %>%
  sf::st_as_sf()
mapview(data_pol)

```

Hence, we better start from `wsh_pol`:

```{r recover-geometry}

watersurfaces_polygons <- stratum_units_grts_aquatic_gw_spsamples_spares %>% 
  filter(sample_support_code == "watersurface") %>% 
  select(unit_id, grts_address_final, sample_status) %>% 
  distinct() %>% 
  left_join(
    wsh_pol,
    join_by(unit_id == polygon_id),
    relationship = "many-to-one",
    unmatched = "drop"
  ) %>%
  sf::st_as_sf()

# mapview(watersurfaces_polygons)
```


```{r polygons-to-centroids}
watersurfaces_data <- watersurfaces_polygons %>%
  sf::st_centroid() %>%
  # sf::st_point_on_surface() %>%
  suppressWarnings()

# mapview(watersurfaces_data)
```


### data double checking

1. missing polygons


```{r find-missing-wsh-polygons}
#| eval: false
stratum_units_grts_aquatic_gw_spsamples_spares %>%
  filter(sample_support_code == "watersurface") %>% 
  anti_join(wsh_pol, join_by(unit_id == polygon_id))

```

Simple: these were the `sample_support_code` != watersurface.


2. duplicate units 

```{r find-duplicate-unit-ids}
#| eval: false
stratum_units_grts_aquatic_gw_spsamples_spares %>%
  count(sample_support_code, unit_id) %>%
  # count(stratum, sample_support_code, unit_id) %>%
  arrange(desc(n))
```

Of course, these are sampled for different strata.


3. centroid vs point-on-surface vs other options

```{r map-surface-centroids}
#| eval: false
# mapviewGetOption("basemaps")

m1 <- watersurfaces_polygons %>% 
  filter(
    stringr::str_detect(unit_id, "^LIMDPB|^LIMGNK"),
    sample_status == "in_sample"
  ) %>%
  mutate(
    highlight = unit_id %in% c("LIMDPB0101", "LIMDPB0157", "LIMDPB0315")
    ) %>%
  sf::st_point_on_surface() %>%
  mapview(
    map.types = c("Esri.WorldImagery", "OpenStreetMap"),
    col.regions = c("snow", "yellow"),
    zcol = "highlight",
    burst = TRUE
  )
m2 <- watersurfaces_polygons %>% 
  filter(
    stringr::str_detect(unit_id, "^LIMDPB|^LIMGNK"),
    sample_status == "in_sample"
  ) %>%
  mapview(col.regions = c("steelblue"))

m3 <- watersurfaces_polygons %>% 
  filter(
    stringr::str_detect(unit_id, "^LIMDPB|^LIMGNK"),
    sample_status == "in_sample"
  ) %>%
  sf::st_centroid() %>% 
  mapview()

m3+m2+m1

```

We immediately encounter the problem of centroids outside the polygon.
Some research: 

- <https://www.spatialanalysisonline.com/HTML/centroids_and_centers.htm>
- <https://github.com/r-spatial/sf/issues/1302#issuecomment-599226372>
- <https://gis.stackexchange.com/a/76563>
- <https://stackoverflow.com/a/13745559> ! 
- <https://grass.osgeo.org/grass-stable/manuals/v.centroids.html>
- <https://gis.stackexchange.com/questions/244769/grass-calculation-of-centroids-very-important-differences-with-qgis-calculatio>


TODO revisit this issue


### filter test data

generate a small test dataset:
unit_id ⊂ {`LIMDPB`, `LIMGNK`}


```{r filter-test-data}
test_data <- watersurfaces_data %>%
  filter(
    stringr::str_detect(unit_id, "^LIMDPB|^LIMGNK"),
    sample_status == "in_sample"
  )

mapview(test_data)
```

:::{.callout-warning}
- There are some points which appear not to be wet (e.g. `LIMGNK0062`). This might have to do with GRTS raster ["partial volumes"]("https://en.wikipedia.org/wiki/Partial_volume_(imaging)").
- Others are vast (`LIMGNK0055`); will be challenging to get elevation gradient.
- `LIMGNK0010` might serve as an example.
:::

```{r map-test-watersurfaces}
# mapviewGetOption("basemaps")
m1 <- test_data %>%
  mutate(
    highlight = unit_id %in% c("LIMGNK0062", "LIMGNK0055", "LIMGNK0010")
    ) %>%
  mapview(
    map.types = c("Esri.WorldImagery", "OpenStreetMap"),
    col.regions = c("snow", "yellow"),
    zcol = "highlight",
    burst = TRUE
  )
m2 <- watersurfaces_polygons %>% 
  filter(
    stringr::str_detect(unit_id, "^LIMDPB|^LIMGNK"),
    sample_status == "in_sample"
  ) %>%
  mapview(col.regions = c("steelblue"))


m2+m1

```

We immediately encounter the problem of centroids outside the polygon.
Some research: 

- <https://www.spatialanalysisonline.com/HTML/centroids_and_centers.htm>
- <https://github.com/r-spatial/sf/issues/1302#issuecomment-599226372>
- <https://gis.stackexchange.com/a/76563>
- <https://stackoverflow.com/a/13745559> ! 
- <https://grass.osgeo.org/grass-stable/manuals/v.centroids.html>
- <https://gis.stackexchange.com/questions/244769/grass-calculation-of-centroids-very-important-differences-with-qgis-calculatio>

# Case Study: LIM*@DHMV

**Natuurreservaat "De Maten"**, nabij Genk.


## query dhmv


```{r query-dhmv}
xy <- as.data.frame(
    sf::st_coordinates(test_data)
  ) %>%
  rename_with(tolower)

margin <- 256 # m
flow_cellsize <- 32 # m
bbox <- sf::st_bbox(
   c(xmin = min(xy["x"]) - margin,
     xmax = max(xy["x"]) + margin,
     ymin = min(xy["y"]) - margin,
     ymax = max(xy["y"]) + margin
     ),
   crs = sf::st_crs(31370)
)
test_raster <- inbospatial::get_coverage_wcs(
  wcs = "dhmv",
  bbox = bbox,
  layername = "DHMVII_DTM_1m",
  version = "2.0.1",
  wcs_crs = "EPSG:31370",
  resolution = 1
)

# plot map
plot(test_raster, col = gray.colors(256)
     # ylab = sprintf("cluster %i (%s)", cluster_idx, regions)
     )
points(xy[["x"]], xy[["y"]], pch = 21, col = "black")
points(xy[["x"]], xy[["y"]], pch = 16, col = "yellow")
# title(sprintf("cluster %i", cluster_idx))

```


## example location: `LIMGNK0010`

```{r filter-test-location}
test_location <- test_data %>%
  filter(
    unit_id == "LIMGNK0010"
    )

test_buffer <- test_location %>%
  sf::st_buffer(margin) 
sub_raster <- terra::crop(test_raster, sf::st_bbox(test_buffer))

plot(sub_raster, col = gray.colors(256))
```


# Flow Direction

## Exploration: flow direction


Prior (by Hans / via `qgisprocess`):

- <https://docs.google.com/presentation/d/1mF9Nd3sXwsZmCYLmAE3vsRYNO7sX4p0ojro9-szMmJY/edit#slide=id.g2e7cd3adab0_21_25>


Whitebox Tools / Hydrological Analysis / FD8 flow pointer

- <https://www.whiteboxgeo.com/manual/wbt_book/available_tools/hydrological_analysis.html#Fd8Pointer>


R / cran / whitebox / `wbt_d8_pointer`

- <https://rdrr.io/cran/whitebox/man/wbt_d8_pointer.html>
- <https://whiteboxr.gishub.org/reference/wbt_d8_pointer.html>


- <https://github.com/inbo/mas-piloot/blob/29b2589baa9b822449624ff207eb53131b286568/src/markdown/general/verkenning_macroinvertebraten_map_vmm.Rmd#L459>


```{r qgis-find-algorithm}
#| eval: false

qgisprocess::qgis_algorithms() %>%
  filter(stringr::str_detect(tolower(algorithm_title), "flow"))
  # filter(stringr::str_detect(tolower(algorithm_title), "pointer"))
  # filter(stringr::str_detect(tolower(algorithm_title), "buffer"))

```

- "grass:r.gwflow",
- "grass:r.flow",


this errors:

```{r qgisprocess-d8-pointer}
#| eval: false

test_flow <- qgisprocess::qgis_run_algorithm(
  "grass:r.flow",
  elevation = sub_raster,
  # output = here::here("data", "dhmvii_dtm_50m_d8_pointer.tif"),
  .quiet = TRUE)
```

  ... but maybe qgis can be skipped.
  
- either via `rgrass`: <https://grasswiki.osgeo.org/wiki/R_statistics/rgrass>
- or directly in terra? <https://rdrr.io/cran/terra/man/terrain.html>


```{r terra-slope}
slope <- terra::terrain(
  sub_raster,
  v = "slope"
  )
plot(slope)
```

```{r terra-flowdir}
flow <- terra::terrain(
  sub_raster,
  v = "flowdir",
  neighbors = 8
  )
plot(flow)
```


nice, but maybe too many details.

```{r resample-coarse}
n_grid <- as.integer(margin/flow_cellsize)

xtnt <- sf::st_bbox(test_buffer)
#     setNames(as.vector()
#   c("xmin", "xmax", "ymin", "ymax"))

coarse_grid <- rast(
  nrows = n_grid, ncols = n_grid,
  xmin = xtnt[["xmin"]],
  xmax = xtnt[["xmax"]],
  ymin = xtnt[["ymin"]],
  ymax = xtnt[["ymax"]],
  )
crs(coarse_grid) <- "EPSG:31370"
x <- resample(
  sub_raster,
  coarse_grid,
  method = "lanczos"
  # method = "bilinear"
)
plot(x)
```

```{r resample-slope}
slope <- terra::terrain(
  x,
  v = "slope"
  )
plot(slope)

```

```{r resample-flow}
flow <- terra::terrain(
  x,
  v = "flowdir",
  neighbors = 8
  )
plot(flow)
```


*I keep forgetting the sin/cos sign conventions ;)*

```
      32  64  128
      16   x    1
       8   4    2

log2:  5   6    7
       4   x    0
       3   2    1
       
2*pi/8 = 0.8
pi:  4.0 3/2pi 5.6
      pi    x    0
     2.4 1/2pi 0.8

|-------|--------|---------|
| α     | cos(α) | -sin(α) |
|-------|--------|---------|
| 0     |    1   |    0    |
| pi/2  |    0   |   -1    |
| pi    |   -1   |    0    |
| 3pi/2 |    0   |   +1    |
| 2pi   |    1   |    0    |
|-------|--------|---------|
| coord |   *x*  |   *y*   |
|-------|--------|---------|

```


- <https://search.r-project.org/CRAN/refmans/pracma/help/quiver.html>

(based on arrows)

```{r arrows}
#| eval: false
x <- stats::runif(12); y <- stats::rnorm(12)
i <- order(x, y); x <- x[i]; y <- y[i]
plot(x,y, main = "arrows(.) and segments(.)")
## draw arrows from point to point :
s <- seq(length(x)-1)  # one shorter than data
graphics::arrows(x[s], y[s], x[s+1], y[s+1], col = 1:3)
```


```{r flow-to-angle}
#| eval: true
# positions <- as(terra::raster(coarse_grid), "SpatialGridDataFrame")
# pz <- terra::rasterToPoints(terra::raster(flow))[,3]
flow_df <- terra::as.data.frame(flow, xy = TRUE)
px <- flow_df[["x"]]
py <- flow_df[["y"]]
pz <- flow_df[["flowdir"]]

# pz[1] <- 2^1
# pz[1<n<9] <- 2^n 
# pz[9] <- 0
direction <- 2*pi/8 * log2(pz)
direction[!is.finite(direction)] <- NA 

dx <- +1*cos(direction)
dy <- -1*sin(direction)

# directions <- as.matrix(flow, wide = TRUE)
```


```{r quiver-plot}
# plot(px, py, cex = 1)
plot(x)
# plot(slope)
pracma::quiver(
  x = px,
  y = py,
  u = dx,
  v = dy,
  scale = 3,
  col = "darkorange"
  )

```


```{r average-direction}
nonnan <- function(vec) vec[!is.na(vec)]
nanmean <- function(vec) mean(nonnan(vec))
print(paste0(nanmean(dx), ", ", nanmean(dy)))

```


```{r radius}
nonnan <- function(vec) vec[!is.na(vec)]
nanmean <- function(vec) mean(vec[!is.na(vec)])
euclid <- function(x, y) sqrt(x^2 + y^2)
within_radius <- function(x, y, r = 128) {
  dist <- euclid(
    nonnan(x) - nanmean(x),
    nonnan(y) - nanmean(y)
  )
  return(dist < r)
}
sel <- within_radius(px, py, r = margin-flow_cellsize) # TODO discuss radius

plot(x)
pracma::quiver(
  x = px[sel],
  y = py[sel],
  u = dx[sel],
  v = dy[sel],
  scale = 3,
  col = "darkorange"
  )

print(paste0(nanmean(dx[sel]), ", ", nanmean(dy[sel])))
```


```{r slope-weighted-average}
nancumsum <- function (vec, weight, selection) {

  vec <- as.matrix(vec)
  weight <- as.matrix(weight)
  selection <- as.matrix(selection)

  nans <- is.na(vec) | is.na(weight) | is.na(selection)
  vec <- vec[!nans]
  weight <- weight[!nans]
  selection <- selection[!nans]

  return(sum(vec[selection] * weight[selection]) / sum(weight[selection]))
}

print(paste0(nancumsum(dx, slope, sel), ", ", nancumsum(dy, slope, sel)))

```


(intermediate TODOs)

- [X] get grids of 32m
- [X] idea: slope-weighted average direction
- [X] test other interpol methods (not matter much)


## Generalization I: Flow Direction

- get flow direction
- based on DHMV
- within given radius 
- ... and given grid size


```{r flow-gradient-general-function}

#' Calculate flow direction
#'
#' Calculate the putative flow direction at a given point
#' based on the elevation/slope in the buffer area around it.
#' All calculations will be performed in CRS 31370, hence the output
#' flow vector will be in meters.
#' 
#' @details this is the slope-averaged flow direction between
#' cells in a coarse raster grid within a given radius around the location
#' (but excluding the outer rim of cells, where no slope is queried).
#' It uses `terra::terrain(coarse_raster, v = "flowdir", neighbors = 8)`.
#'
#' @param location the point (or polygon) of interest;
#'        an `sf` object of which the `sf::st_coordinates` are used.
#' @param flow_range the buffer extent (in meters) around the location, 
#'        which is used to query elevation and calculate flow.
#'        Units are those of the coordinates.
#' @param flow_cellsize the width of a cell in the resampled raster
#'        across which elevation is averaged to calculate flow.
#'        Units are those of the coordinates.
#' @param save_plot_filepath if this is not NA, a summary map of the
#'        flow calculation will be saved as "png" image to the given path.
#' 
#' @return c(dx,dy) vector (in meters) of the average flow direction in a
#'        circular area around the location.
#'
#' @examples
#' \dontrun{
#'   location <- sf::st_sfc(sf::st_point(c(225598, 182350), dim = "XY"))
#'   sf::st_crs(location) <- 31370
#'   calculate_flow_direction(location, flow_range = 1024, flow_cellsize = 32)
#' }
#'
calculate_flow_direction <- function(
    location,
    flow_range = 256, flow_cellsize = 32,
    save_plot_filepath = NA) {

  # location_raw <- location # currently not necessary to store the data in raw CRS

  # all calculations will be performed in CRS 31370 # TODO assert
  # location <- sf::st_transform(location, 31370)
  assert_31370(location) 

  # only the coordinates are relevant ("xy", but could be "lon/lat")
  xy <- as.data.frame(
      sf::st_coordinates(location)
    ) %>%
    rename_with(tolower)
  
  ### Query DHMV
  # (elevation model of Flanders)
  # within a buffer area
  bbox <- sf::st_bbox(
     c(xmin = min(xy[1]) - flow_range,
       xmax = max(xy[1]) + flow_range,
       ymin = min(xy[2]) - flow_range,
       ymax = max(xy[2]) + flow_range
       ),
     crs = sf::st_crs(31370)
  )

  location_raster <- inbospatial::get_coverage_wcs(
    wcs = "dhmv",
    bbox = bbox,
    layername = "DHMVII_DTM_1m",
    version = "2.0.1",
    wcs_crs = "EPSG:31370",
    resolution = 1
  ) 
  
  ### Resample
  # to get a coarse grid
  n_grid <- as.integer(flow_range/flow_cellsize)
  
  # resample within the buffer range
  coarse_grid <- terra::rast(
    nrows = n_grid, ncols = n_grid,
    xmin = min(xy[1]) - flow_range,
    xmax = max(xy[1]) + flow_range,
    ymin = min(xy[2]) - flow_range,
    ymax = max(xy[2]) + flow_range
    )
  terra::crs(coarse_grid) <- "EPSG:31370"
  coarse_raster <- terra::resample(location_raster, coarse_grid,
    method = "lanczos" # method = "bilinear"
  )
  
  ### calculations
  # slope and flow, using terra::terrain
  slope <- terra::terrain(coarse_raster, v = "slope")
  flow <- terra::terrain(coarse_raster, v = "flowdir", neighbors = 8)
  
  flow_df <- terra::as.data.frame(flow, xy = TRUE) %>%
    left_join(
      terra::as.data.frame(slope, xy = TRUE),
      join_by(x, y)
    ) %>%
    filter(!is.na(slope))
  
  flow_sf <- sf::st_as_sf(flow_df, coords = c("x", "y"), crs = 31370)
  
  
  flow_df <- cbind(
      sf::st_drop_geometry(flow_sf),
      as_tibble(sf::st_coordinates(flow_sf))
    ) %>%
    rename(c("x" = "X", "y" = "Y"))
  
  fpx <- flow_df[["x"]]
  fpy <- flow_df[["y"]]
  fpz <- flow_df[["flowdir"]]
  fpv <- flow_df[["slope"]]
  
  # convert direction to angles...
  direction <- 2*pi/8 * log2(fpz)
  direction[!is.finite(direction)] <- NA 
  
  # ... convert direction angles to "dx", "dy"
  dx <- +1*cos(direction)
  dy <- -1*sin(direction)
  
  # helper functions:
  # remove nan
  nonnan <- function(vec) vec[!is.na(vec)]
  # mean, excluding NAs
  nanmean <- function(vec) mean(nonnan(vec))

  # Euclidean length of the vector
  euclid <- function(x, y) sqrt(x^2 + y^2)

  # filter coordinates within radius
  within_radius <- function(x, y, r = 128) {
    dist <- euclid(
      nonnan(x) - nanmean(x),
      nonnan(y) - nanmean(y)
    )
    return(dist < r)
  }
      
  # calculate the average flow, but weighted and filtered
  average_flow <- function (vec, weight, selection) {
  
    # simplify input data types
    vec <- as.matrix(vec)
    weight <- as.matrix(weight)
    selection <- as.matrix(selection)
  
    # disregard NA's
    nans <- is.na(vec) | is.na(weight) | is.na(selection)
    vec <- vec[!nans]
    weight <- weight[!nans]
    selection <- selection[!nans]
  
    # return the weighted average of the vector
    return(sum(vec[selection] * weight[selection]) / sum(weight[selection]))
  }
  
  ### compute average flow of coarse cells within radius
  # exclude the outer rows of cells (where no slope is queried)
  sel <- within_radius(fpx, fpy, r = flow_range - flow_cellsize) 
  flow_vector <- c(average_flow(dx, fpv, sel), average_flow(dy, fpv, sel))

  ### optionally store a quiver plot on a map for vizualization
  if (!is.na(save_plot_filepath)) {

    png(save_plot_filepath,
      width = 120,
      height = 120,
      units = "mm",
      res = 300
    )

    # raster background
    plot(location_raster)

    # flow per cell
    pracma::quiver(
      x = fpx[sel],
      y = fpy[sel],
      u = dx[sel],
      v = dy[sel],
      scale = 8,
      col = "gray"
      )

    # average flow
    pracma::quiver(
      x = xy[[1]],
      y = xy[[2]],
      u = flow_cellsize * flow_vector[[1]],
      v = flow_cellsize * flow_vector[[2]],
      scale = 3,
      col = "darkorange"
    )

    dev.off()
  }
    
  return(flow_vector)

} # /calculate_flow_direction
```


The function is batch-applied as follows:

```{r flow-gradient-application}

# exemplary execution
for (location_code in c("LIMGNK0062", "LIMGNK0055", "LIMGNK0010")) {
  test_location <- test_data %>% 
    filter(unit_id == location_code)

  # location <- test_location

  flow_vector <- calculate_flow_direction(
    test_location,
    flow_range = 256,
    flow_cellsize = 32,
    save_plot_filepath = here::here("figures", sprintf("%s.png", location_code))
  )
  print(paste0(
    location_code, ": ",
    paste0(flow_vector, collapse = ", "),
    collapse = ""
  ))

}

```


## flow in circles

Instead of a local grid of fixed size, we require calculation of the flow within a band around the watersurface.


```{r polygon-flow-direction}
close_polygon <- function(pol, radius = 1){
  return(
    pol %>%
      sf::st_buffer(radius) %>%
      sf::st_buffer(-radius)
  )
}

calculate_polygon_flow_direction <- function(
    water_polygon,
    flow_range = 128+32, flow_cellsize = 32,
    close_island_size = NA,
    save_plot_filepath = NA) {

  # plot(sub_raster, col = gray.colors(256))
  if (!is.na(close_island_size)) {
    water_polygon <- water_polygon %>% 
      close_polygon(close_island_size)
  }
  
  band_buffer <- st_difference(
    sf::st_buffer(water_polygon, flow_range-flow_cellsize),
    sf::st_buffer(water_polygon, -flow_cellsize)
    ) %>% suppressWarnings()
  # mapview(band_buffer) 
  xtnt <- sf::st_bbox(band_buffer)

  band_raster <- inbospatial::get_coverage_wcs(
    wcs = "dhmv",
    bbox = xtnt,
    layername = "DHMVII_DTM_1m",
    version = "2.0.1",
    wcs_crs = "EPSG:31370",
    resolution = 1
  )
  
  coarse_grid <- terra::rast(
    nrows = (xtnt[["ymax"]] - xtnt[["ymin"]])/flow_cellsize,
    ncols = (xtnt[["xmax"]] - xtnt[["xmin"]])/flow_cellsize,
    xmin = xtnt[["xmin"]],
    xmax = xtnt[["xmax"]],
    ymin = xtnt[["ymin"]],
    ymax = xtnt[["ymax"]],
    )
  crs(coarse_grid) <- "EPSG:31370"
  band_raster_coarse <- resample(
    band_raster,
    coarse_grid,
    method = "lanczos"
    # method = "bilinear"
  )
  # plot(band_raster_coarse)
  
  slope <- terra::terrain(band_raster_coarse, v = "slope")
  flow <- terra::terrain(band_raster_coarse, v = "flowdir", neighbors = 8)
  
  flow_df <- terra::as.data.frame(flow, xy = TRUE) %>%
    left_join(
      terra::as.data.frame(slope, xy = TRUE),
      join_by(x, y)
    ) %>%
    filter(!is.na(slope))
  
  flow_sf <- sf::st_as_sf(flow_df, coords = c("x", "y"), crs = 31370)
  flow_sf <- flow_sf %>%
    sf::st_intersection(sf::st_geometry(band_buffer)) %>%
    suppressWarnings()
  # mapview(flow_sf, zcol = "slope")
  # mapview(flow_sf, zcol = "flowdir")
  
  
  flow_df <- cbind(
      sf::st_drop_geometry(flow_sf),
      as_tibble(sf::st_coordinates(flow_sf))
    ) %>%
    rename(c("x" = "X", "y" = "Y"))
  
  fpx <- flow_df[["x"]]
  fpy <- flow_df[["y"]]
  fpz <- flow_df[["flowdir"]]
  fpv <- flow_df[["slope"]]
  
  direction <- 2*pi/8 * log2(fpz)
  direction[!is.finite(direction)] <- NA 
  
  dx <- +1*cos(direction)
  dy <- -1*sin(direction)
  
  # plot(slope)
  # pracma::quiver(
  #   x = px,
  #   y = py,
  #   u = dx,
  #   v = dy,
  #   scale = 3,
  #   col = "darkorange"
  #   )
  
  nancumsum <- function (vec, weight) {
  
    vec <- as.matrix(vec)
    weight <- as.matrix(weight)
  
    nans <- is.na(vec) | is.na(weight) 
    vec <- vec[!nans]
    weight <- weight[!nans]
  
    return(sum(vec * weight) / sum(weight))
  }
  
  # print(paste0(nancumsum(dx, pv), ", ", nancumsum(dy, pv)))
  #
  flow_vector <- c(nancumsum(dx, fpv), nancumsum(dy, fpv))  

  ### optionally store a quiver plot on a map for vizualization
  if (!is.na(save_plot_filepath)) {

    png(save_plot_filepath,
      width = 120,
      height = 120,
      units = "mm",
      res = 300
    )

    # raster background
    plot(band_raster)

    # flow per cell
    pracma::quiver(
      x = fpx,
      y = fpy,
      u = dx,
      v = dy,
      scale = 8,
      col = "gray"
    )

    xy <- sf::st_coordinates(
        water_polygon %>%
        sf::st_centroid()
      ) %>%
      suppressWarnings() %>%
      data.frame
    # message(xy)

    # average flow
    pracma::quiver(
      x = xy[[1]],
      y = xy[[2]],
      u = flow_cellsize * flow_vector[[1]],
      v = flow_cellsize * flow_vector[[2]],
      scale = 3,
      col = "darkorange"
    )

    dev.off()
  }

  return(flow_vector)
}


```

```{r test-band-flow}
for (location_code in c(
    "LIMGNK0062",
    "LIMGNK0055",
    "LIMGNK0010",
    "ANTMOL0164"
    )) {
  test_polygon <- watersurfaces_polygons %>%
    filter(unit_id == location_code)
  flow_vector <- calculate_polygon_flow_direction(
    test_polygon,
    flow_range = 128+32, flow_cellsize = 32,
    close_island_size = 8,
    save_plot_filepath = here::here("figures", sprintf("%s.png", location_code))
  )

  print(paste0(
    location_code, ": ",
    paste0(flow_vector, collapse = ", "),
    collapse = ""
  ))
}
    
```


# Identify Target Area

## strategy

- get target direction (upflow)
- get outer buffer of the water body of interest
- wedge buffer in target direction

## technical: casting polygons

```{r casting-polygons}
#| eval: false
test_data <- watersurfaces_data %>%
  filter(
    stringr::str_detect(unit_id, "^LIMDPB|^LIMGNK"),
    sample_status == "in_sample"
  )

# test_location <- test_data %>%
#   filter(
#     unit_id == "LIMGNK0010"
#     )

water_mupo <- wsh$watersurfaces_polygons %>%
  filter(polygon_id %in% test_data$unit_id)

water_poly <- water_mupo %>%
  sf::st_cast("POLYGON", warn = FALSE)

water_vali <- water_poly %>%
  sf::st_make_valid() 

m1 <- mapview(water_mupo, col.regions = "grey")
m2 <- mapview(water_poly, col.regions = "steelblue")
m3 <- mapview(water_vali, col.regions = "brown")

m1+m2+m3

```

seems visually good.


## exploration: target area

Target will be in a belt around the water surface.

```{r direction-exploration-buffer}
# stratum_units_grts_aquatic_gw_spsamples_spares %>% 
#   filter(unit_id == test_location$unit_id)

# wsh_occ # `polygon_id`, but no `geom`
water <- wsh$watersurfaces_polygons %>%
  filter(polygon_id %in% test_location$unit_id) %>% 
  sf::st_cast("POLYGON", warn = FALSE) %>%
  sf::st_make_valid() 


buffer_range <- c(10, 30) # "belt from... to..." distance range

water_buffer <- st_difference(
  sf::st_buffer(water, buffer_range[2]),
  sf::st_buffer(water, buffer_range[1])
  )

water_buffer %>% 
  mapview(
    map.types = "OpenStreetMap"
    )
```


... but we only admit a wedge area in the direction opposite of flow/slope.

```{r direction-exploration-direction}
wedge_width <- pi/3

get_x_extent <- function(box) abs(box[["xmax"]] - box[["xmin"]])
get_y_extent <- function(box) abs(box[["ymax"]] - box[["ymin"]])
get_extent <- function(box) sqrt(get_x_extent(box)^2+get_y_extent(box)^2)/2
wedge_range <- get_extent(st_bbox(water_buffer)) + buffer_range[2]

test_coords <- sf::st_coordinates(test_location) %>% as_tibble %>% rename_with(tolower)

pt0 <- t(as.matrix(c(0, 0)))
upstream <- t(as.matrix(-calculate_polygon_flow_direction(water, 64, 8, 8)))
vector_norm <- function(vec) sqrt(sum(vec^2))
upstream_vec <- wedge_range * upstream / vector_norm(upstream)
vector_norm(upstream_vec)

rotate_vec <- function(vec, theta) vec %*% matrix(c(
   cos(theta), sin(theta),
  -sin(theta), cos(theta)
  ), ncol =2)
pt1 <- rotate_vec(upstream_vec, wedge_width/2)
pt2 <- rotate_vec(upstream_vec, -wedge_width/2)

triangle <- as.data.frame(rbind(pt0, pt1, pt2)) %>%
  setNames(c("x", "y")) %>% 
  mutate(x = x + test_coords[["x"]], y = y + test_coords[["y"]]) %>% 
  sf::st_as_sf(coords = c("x", "y"), crs = 31370)

triangle <- st_combine(triangle) %>% st_cast("POLYGON", warn = FALSE)

target_area <- triangle %>% sf::st_intersection(water_buffer)

mapview(target_area,
    map.types = "OpenStreetMap"
  )

```


## Generalization II: Buffer Wedge

```{r general-buffer-upstream-wedge}
  
#' Determine target area for well placement
#' around aquatic habitat types.
#'
#' Provides a polygon area in a buffer band around the
#' water surface of interest, in the upstream direction
#' of putative groundwater flow (elevation model).
#'
#' @param water_polygon an `sf` polygon-like object capturing
#'        the water surface.
#' @param original_location sf point indicating placement target;
#'        centroid of the water_polygon will be used per default.
#' @param buffer_range two-element vector c(from, to) which
#'        determines the distance range around the polygon in
#'        which the target location should be found.
#' @param buffer_arc_radians indicates the slice of a circle
#'        to which the target buffer is restricted.
#'        range [0, 2*pi]; set to 2*pi of is.na
#' @inheritParams calculate_polygon_flow_direction
#' 
#' @return target area, as an sf object with POLYGON geometry
#'
#' @examples
#' \dontrun{
#'   wspol <- read_watersurfaces_hab(interpreted = TRUE)$watersurfaces_polygons
#'   test_polygon <- wspol %>%
#'     filter(polygon_id == "LIMGNK0062") %>% 
#'     sf::st_cast("POLYGON", warn = FALSE)
#'   test_target <- determine_target_area(
#'     test_polygon,
#'     buffer_range = c(1, 10),
#'     buffer_arc_radians = 1, # because 1 ≡ pi/3
#'     flow_range = 64,
#'     flow_cellsize = 8
#'   )
#' }
#' 
determine_target_area <- function(
    water_polygon,
    original_location = NA,
    buffer_range = NA,
    buffer_arc_radians = 1, # because 1 ≡ pi/3
    ...
    ) {

  # ensure meaningful buffer range
  if (any(is.na(buffer_range))) {
    buffer_range <- c(5, 20)
  } else {
    # buffer_range <- abs(buffer_range)
    buffer_range <- c(min(buffer_range), max(buffer_range))
  }

  # ensure correct wedge width
  buffer_arc_radians <- buffer_arc_radians %% (2*pi)
  if ((!is.numeric(buffer_arc_radians)) ||
      (is.na(buffer_arc_radians)) ||
      (buffer_arc_radians == 0)
      ){
    buffer_arc_radians = 2*pi
  }

  # a buffer belt around the aquatic type  
  water_buffer <- st_difference(
    sf::st_buffer(water_polygon, buffer_range[2]),
    sf::st_buffer(water_polygon, buffer_range[1])
    ) %>% suppressWarnings
  # mapview(water_buffer)
  
  # ensure the wedge covers the belt
  get_x_extent <- function(box) abs(box[["xmax"]] - box[["xmin"]])
  get_y_extent <- function(box) abs(box[["ymax"]] - box[["ymin"]])
  get_extent <- function(box) sqrt(
    get_x_extent(box)^2 + get_y_extent(box)^2
  ) / 2

  wedge_range <- get_extent(st_bbox(water_buffer)) + buffer_range[2]

  
  # determine the flow direction and project the opposite way
  if (any(is.na(original_location))) {
    original_location <- st_centroid(water_polygon) %>%
      suppressWarnings()
  }

  # correct coordinate columns
  original_location <- sf::st_as_sf(
    cbind(
      sf::st_drop_geometry(original_location),
      as_tibble(sf::st_coordinates(original_location)) %>%
        rename(c("x" = "X", "y" = "Y"))
    ), coords = c("x", "y"), crs = 31370)

  # get flow direction
  # upstream <- t(as.matrix(-calculate_flow_direction(original_location)))
  upstream <- t(as.matrix(-calculate_polygon_flow_direction(water_polygon, ...)))

  # standardized vector length
  vector_norm <- function(vec) sqrt(sum(vec^2))
  upstream_vec <- wedge_range * upstream / vector_norm(upstream)
  
  # aggregate points in an arc around the center to cover all the belt
  rotate_vec <- function(vec, theta) vec %*% matrix(c(
     cos(theta), sin(theta),
    -sin(theta), cos(theta)
    ), ncol =2)

  arc_points <- rbind(t(as.matrix(c(0, 0))))
  for (rot_rad in seq(
      -buffer_arc_radians/2,
      buffer_arc_radians/2,
      length.out = as.integer(round(buffer_arc_radians*180/pi))
    )) {
    pt <- rotate_vec(upstream_vec, rot_rad)
    arc_points <- rbind(arc_points, pt)
  }
  
  # offset the arc by the center location
  center_coords <- sf::st_coordinates(original_location) %>%
    as_tibble %>% rename_with(tolower)
  
  arc <- as.data.frame(arc_points) %>%
    setNames(c("x", "y")) %>% 
    mutate(x = x + center_coords[["x"]], y = y + center_coords[["y"]]) %>% 
    sf::st_as_sf(coords = c("x", "y"), crs = 31370)
  
  arc <- st_combine(arc) %>% st_cast("POLYGON", warn = FALSE)
  
  # the target are is the intersect of the arc and the buffer
  target_area <- arc %>% sf::st_intersection(water_buffer)
  
  m1 <- mapview(water_polygon, map.types = "OpenStreetMap", col.regions = "lightblue")
  m2 <- mapview(water_buffer, map.types = "OpenStreetMap", col.regions = "darkblue")
  m3 <- mapview(arc, map.types = "OpenStreetMap", col.regions = "orange")
  # m4 <- mapview(target_area, map.types = "OpenStreetMap", col.regions = "red")
  m1+m2+m3

    
  return(target_area)
} # /determine_target_area

```


Fancy visualization:

```{r test-flowdir-buffer}

test_polygon <- wsh$watersurfaces_polygons %>%
  filter(polygon_id %in% test_location$unit_id) %>% 
  sf::st_cast("POLYGON", warn = FALSE) %>%
  sf::st_make_valid() 
  
test_target <- determine_target_area(
  test_polygon,
  buffer_range = c(1, 10),
  buffer_arc_radians = -1, # because 1 ≡ pi/3
  flow_range = 256,
  flow_cellsize = 32
)

center_location <- st_centroid(test_polygon) %>% suppressWarnings()
center_coords <- sf::st_coordinates(center_location) %>%
  as_tibble %>% rename_with(tolower)

flow_dir <- calculate_polygon_flow_direction(
  test_polygon,
  flow_range = 128,
  flow_cellsize = 32,
  close_island_size = 8
)
upstream <- t(as.matrix(-flow_dir))
vector_norm <- function(vec) sqrt(sum(vec^2))
upstream_vec <- 100 * upstream / vector_norm(upstream)

inflow <- as.data.frame(rbind(upstream_vec, t(as.matrix(c(0, 0))))) %>%
  setNames(c("x", "y")) %>% 
  mutate(x = x + center_coords[["x"]], y = y + center_coords[["y"]]) %>% 
  sf::st_as_sf(coords = c("x", "y"), crs = 31370)

inflow <- st_combine(inflow) %>% st_cast("LINESTRING")

m1 <- mapview(test_polygon, map.types = "OpenStreetMap", col.regions = "lightblue")
m2 <- mapview(inflow, map.types = "OpenStreetMap", col.regions = "darkblue")
m3 <- mapview(test_target, map.types = "OpenStreetMap", col.regions = "red")
m1 + m2 + m3

```


## Generalization III: Mapview

```{r generalize-flowdir-buffer-plot}

# TODO: this function still uses the `data` collected above

calculate_aquatic_type_targets <- function(
    location_code,
    flow_range = 128,
    flow_cellsize = 32,
    buffer_range = NA,
    buffer_arc_radians = 1, # because 1 ≡ pi/3
    save_plot_filepath = NA
    ){

  location <- watersurfaces_data %>% 
    filter(unit_id == location_code)
  water_polygon <- wsh$watersurfaces_polygons %>%
    filter(polygon_id == location_code) %>% 
    sf::st_cast("POLYGON", warn = FALSE) 
    
  flow_dir <- calculate_polygon_flow_direction(
    water_polygon,
    flow_range = flow_range,
    flow_cellsize = flow_cellsize,
    close_island_size = 8,
    save_plot_filepath = save_plot_filepath
  )

  target_area <- determine_target_area(
    water_polygon,
    original_location = location,
    flow_range = flow_range,
    flow_cellsize = flow_cellsize,
    buffer_range = buffer_range,
    buffer_arc_radians = buffer_arc_radians
  )


  upstream <- t(as.matrix(-flow_dir))
  vector_norm <- function(vec) sqrt(sum(vec^2))
  upstream_vec <- 100 * upstream / vector_norm(upstream)
  

  center_coords <- sf::st_coordinates(location) %>%
    as_tibble %>% rename_with(tolower)
  inflow <- as.data.frame(rbind(upstream_vec, t(as.matrix(c(0, 0))))) %>%
    setNames(c("x", "y")) %>% 
    mutate(x = x + center_coords[["x"]], y = y + center_coords[["y"]]) %>% 
    sf::st_as_sf(coords = c("x", "y"), crs = 31370)
  inflow <- st_combine(inflow) %>% st_cast("LINESTRING")
    
  return(
    list(
      location_code = location_code,
      location = location,
      water_polygon = water_polygon,
      flow_direction = flow_dir,
      inflow = inflow,
      target_area = target_area
    )
  )

} # /calculate_aquatic_type_targets
```


batch-visualize

```{r visualize}

# location_code <- "LIMDPB0157"
target_open <- function(spatialist, buf = 2) {

  # shrink/expand to separate islands
  target_area <- spatialist$target_area %>% 
      sf::st_buffer(-buf) %>% 
      sf::st_buffer(buf)

  # calculate distances from centroid
  geometries <- st_cast(target_area, "POLYGON")
  # length(geometry)
  centroid <- spatialist$location %>%
    select(unit_id) %>%
    distinct
  distances <- sf::st_distance(centroid, geometries) 

  spatialist$target_area <- geometries[which.max(t(distances))]
    
  return(spatialist)
}

assemble_targeting <- function(
    location_code,
    show_mapview = FALSE
  ) {

  # location_code <- "LIMGNK0010"

  spatialist <- calculate_aquatic_type_targets(
      location_code,
      flow_range = 128,
      flow_cellsize = 32,
      buffer_range = NA,
      buffer_arc_radians = 1, # because 1 ≡ pi/3
      save_plot_filepath = NA
    ) %>%
    target_open(buf = 2)

  if (show_mapview) {
    m1 <- mapview(spatialist$water_polygon,
      map.types = "OpenStreetMap", col.regions = "lightblue")
    
    m2 <- mapview(spatialist$inflow, map.types = "OpenStreetMap", col.regions = "darkblue")
    m3 <- mapview(spatialist$target_area, map.types = "OpenStreetMap", col.regions = "red")
    return(m1 + m2 + m3)
  }
  return(spatialist)
  
}

location_code <- "LIMGNK0062"
assemble_targeting(location_code, show_mapview = TRUE)
```


We can even show a large set of aquatic locations on the map.

```{r assemble-data}
# location_code_list <- c("LIMGNK0062", "LIMGNK0055", "LIMGNK0010")
location_code_list <- test_data$unit_id

target_data <- lapply(location_code_list, FUN = assemble_targeting)
```


```{r combine-data}
all_polygons <- bind_rows(lapply(
    target_data, FUN = function(td) td$water_polygon
  ))

vector_norm <- function(vec) sqrt(sum(vec^2))
all_inflows <- bind_rows(lapply(
    target_data, FUN = function(td) cbind(
      td$location_code,
      vector_norm(td$flow_direction),
      sf::st_as_sf(td$inflow)
      )
  )) %>% rename(c(
    "flow_gradient" = "vector_norm.td.flow_direction.",
    "location_code" = "td.location_code"
  ))

all_targets <- bind_rows(lapply(
    target_data, FUN = function(td) sf::st_as_sf(td$target_area)
  ))


# and map them out
map_types <- c("OpenStreetMap", "Esri.WorldImagery")

m1 <- mapview(all_polygons,
  map.types = map_types, col.regions = "lightblue")

m2 <- mapview(all_inflows, map.types = map_types, col.regions = "darkblue", zcol = "flow_gradient")
m3 <- mapview(all_targets, map.types = map_types, col.regions = "red")

m1 + m2 + m3

```





# Application to Streams and Springs

We have other types of water bodies.

```{r streams-and-springs}
stratum_units_grts_aquatic_gw_spsamples_spares %>%
  count(sample_support_code) %>%
  # sf::st_drop_geometry() %>%
  knitr::kable()
```

```{r obsolete-datasource}
#| eval: false

geometry_link <- get(
    "scheme_moco_ps_stratum_sppost_spsamples_spares_sf",
    envir = env_extradata
  ) %>%
  # sf::st_transform(31370) %>% 
  assert_31370() %>% 
  select(grts_address) %>%
  distinct


data_obsolete <- geometry_link %>%
  right_join(
    stratum_units_grts_aquatic_gw_spsamples_spares,
  by = join_by(grts_address == grts_address_final),
  relationship = "one-to-many",
  unmatched = "drop"
  )

```

## stream test data

```{r stream-testing}
#| eval: true
# stratum_units_grts_aquatic_gw_spsamples_spares %>% 


stream_test_data <- 
  segm_3260 %>% 
    filter(
      stringr::str_detect(unit_id, "^9574_"),
      unit_id > "9574_218778"
    ) %>%
  right_join(
    stratum_units_grts_aquatic_gw_spsamples_spares,
    by = join_by(unit_id),
    relationship = "one-to-many",
    unmatched = "drop"
  ) %>% 
  filter(sample_support_code == "watercourse_segment") %>%
  arrange(unit_id)

location_code <- "9574_218821"
test_location <- stream_test_data %>%
  filter(unit_id == location_code)

mapview(stream_test_data)
```


```{r test-stream-plot-dhmv}

xy <- as.data.frame(
    sf::st_coordinates(stream_test_data)
  ) %>%
  rename_with(tolower)

margin <- 256 # m
flow_cellsize <- 32 # m
bbox <- sf::st_bbox(
   c(xmin = min(xy["x"]) - margin,
     xmax = max(xy["x"]) + margin,
     ymin = min(xy["y"]) - margin,
     ymax = max(xy["y"]) + margin
     ),
   crs = sf::st_crs(31370)
)
test_raster <- inbospatial::get_coverage_wcs(
  wcs = "dhmv",
  bbox = bbox,
  layername = "DHMVII_DTM_1m",
  version = "2.0.1",
  wcs_crs = "EPSG:31370",
  resolution = 1
)

# plot map
plot(test_raster, col = gray.colors(256)
     # ylab = sprintf("cluster %i (%s)", cluster_idx, regions)
     )
points(xy[["x"]], xy[["y"]], pch = 21, col = "black")
points(xy[["x"]], xy[["y"]], pch = 16, col = "yellow")
# title(sprintf("cluster %i", cluster_idx))


```

```{r stream-dhmv}

test_buffer <- test_location %>%
  sf::st_buffer(margin) 
sub_raster <- terra::crop(test_raster, sf::st_bbox(test_buffer))

plot(sub_raster, col = gray.colors(256))
points(
  sf::st_coordinates(test_location)[1,"X"],
  sf::st_coordinates(test_location)[1,"Y"],
  pch = 16, col = "yellow")

calculate_flow_direction(
    test_location,
    flow_range = 256, flow_cellsize = 32,
    save_plot_filepath = here::here("figures", sprintf("%s.png", location_code)))

```

In this special case, flow direction might be useful for the stream data point;
However, it is not clear whether/how this will generalizes. 


## TODO stream data preview

- lines or points, and where to get them - that is the question!

```{r lines-or-points}
#| eval: false

stream_points <- read_watercourse_100mseg(element = "points") %>% 
  filter(vhag_code == 9574)
stream_lines <- read_watercourse_100mseg(element = "lines") %>% 
  filter(vhag_code == 9574)

mapview(stream_points, col.regions = "brown") +
    mapview(stream_lines, col.regions = "steelblue")

```

Indeed, `read_watercourse_100mseg(element = "lines")` seems to be more accurate.


## stream flow maths

Streams flow from source to sea, 
and the 100m segments are a severe simplification.

Back to the raw data:

```{r stream-raw-data}
# mapview(habstream)
stream_points <- read_watercourse_100mseg(element = "points")

test_stream_points <- stream_points %>%
  filter(vhag_code == 9574)

mapview(test_stream_points)

```

Rank: goes in "upstream" direction (water source: highest rank)

- <https://github.com/inbo/n2khab/blob/main/R/read_watercourses.R>
- <https://github.com/inbo/n2khab-preprocessing/blob/main/src/generate_watercourse_100mseg/10_generate_watercourse_100mseg.Rmd>


Maths refresher:

- <https://www.cs.toronto.edu/~mangas/teaching/320/slides/CSC320L04.pdf>
- <https://math.libretexts.org/@go/page/589>
- possibly Taylor series
- possibly arc-length-parametrization


We require:

- flow direction
- tangent
- normal
- curve forward/backward 
  - (projection onto normal)
  - "How much of the normal we must add to the tangent to approximate the tangent at t+dt".



```{r stream-curve-calculations}
## for testing:
# vhag <- 9574
# segment_rank <- 218821

# extract a single stream from the 100m watercourse segments
get_stream_curve <- function(vhag, segment_rank) {

  # stream_points <- read_watercourse_100mseg(element = "points")

    
  # filter the points of interest
  target_stream_points <- stream_points %>%
    filter(vhag_code == as.numeric(vhag))

  # join them as a curve
  stream_curve <- as.data.frame(
    cbind(target_stream_points$rank, sf::st_coordinates(target_stream_points))
  )  
  names(stream_curve) <- c("rank", "x", "y")

  # sort by "rank", i.e. point number
  stream_curve$rank <- stream_curve$rank - segment_rank
  stream_curve <- stream_curve %>% arrange(rank)

  return(stream_curve)
}

# quick-plot a curve
plot_stream_curve <- function(stream_curve) {

  stopifnot("ggplot2" = require("ggplot2"))
  stream_curve %>%
    ggplot(ggplot2::aes(x = x, y = y)) +
      ggplot2::geom_line() +
      ggplot2::geom_point(aes(color = rank))
}


# test plot
test_curve <- get_stream_curve(vhag = 9574, segment_rank = 218821)
plot_stream_curve(test_curve)


# the tangent at each segment point of the watercourse
get_stream_tangent <- function(
    stream_curve,
    normed = FALSE,
    append = FALSE,
    second = FALSE
    ) {
  
  # first derivative using splines
  # https://stackoverflow.com/a/61287125
  stopifnot("pspline" = require("pspline"))
  t <- -stream_curve$rank # ! inverted: water flow directed downstream
  x <- stream_curve$x
  y <- stream_curve$y

  if (length(t) < 3) {
    stream_curve$tx <- c(diff(x), NA)
    stream_curve$ty <- c(diff(y), NA)
  } else {
    stream_curve$tx <- predict(sm.spline(t, x), t, 1)
    stream_curve$ty <- predict(sm.spline(t, y), t, 1)
  }

  # optionally append second derivative
  if (second) {
    stream_curve$tx2 <- predict(sm.spline(t, x), t, 2)
    stream_curve$ty2 <- predict(sm.spline(t, y), t, 2)
  }

  # optionally normalize 
  tangent_norm <- function(x, y) sqrt((x**2) + (y**2))
  stream_curve$nt <- tangent_norm(stream_curve$tx, stream_curve$ty)

  if (normed) {
    stream_curve$tx <- stream_curve$tx / stream_curve$nt
    stream_curve$ty <- stream_curve$ty / stream_curve$nt

    if (second) {
      n2 <- tangent_norm(stream_curve$tx2, stream_curve$ty2)
      stream_curve$tx2 <- stream_curve$tx2 / n2
      stream_curve$ty2 <- stream_curve$ty2 / n2
    }
  }
    
  # return appended or directly ("inplace = False")
  if (append) return(stream_curve)
  if (second) return(stream_curve[, c("rank", "tx2", "ty2")])
  return(stream_curve[, c("rank", "tx", "ty")])
}


# calculate the normals, based on tangents
# normals are defined as -π/2 rotation (ccw orthogonal) of the tangent
get_normal <- function(
    stream_curve,
    normed = FALSE,
    append = FALSE
    ) {

  # ensure that the tangent is calculated
  stream_curve <- get_stream_tangent(
    stream_curve,
    normed = normed,
    append = TRUE,
    second = FALSE
  )
    
  # ... and extract the tangent
  tx <- stream_curve$tx
  ty <- stream_curve$ty

  # list of vectors for lapply
  tangents <- lapply(1:length(tx), FUN = function(t) c(tx[t], ty[t]))  

  # conventional rotation -> normal
  rotate_90_ccw <- matrix(c(
     cos(-pi/2), sin(-pi/2),
    -sin(-pi/2), cos(-pi/2)
    ), ncol =2)
  normals <- bind_rows(lapply(
    1:length(tx),
    FUN = function(t) as.data.frame(tangents[[t]] %*% rotate_90_ccw)
  ))
  names(normals) <- c("nx", "ny")

  # head(cbind(stream_curve, normals)) # cbind creates duplicate cols
  if (append) {
    # stream_curve <- stream_curve %>% select(-nx, -ny)
    stream_curve$nx <- normals$nx
    stream_curve$ny <- normals$ny
    return(stream_curve)
  }

  return(normals)
}


# get curvature or curvature direction for a line segment
# optionally smoothed
# direction is coded as curvature sign (-1: left turn, +1: right turn) but with 0: NA
get_curvature_direction <- function(stream_curve, direction = TRUE, smooth = NA) {

  # for the dot product
  stopifnot("geometry" = require("geometry"))

  # certainly calculate tangents
  stream_normal <- get_normal(
    stream_curve,
    normed = TRUE,
    append = FALSE
  )

  # numeric difference vector
  dx <- diff(stream_curve$x)
  dy <- diff(stream_curve$y)

  # normalize differentials
  d2_norm <- function(x, y) sqrt((x**2) + (y**2))
  l <- d2_norm(dx, dy)
  dx <- dx / l
  dy <- dy / l

  # tangents and normals
  tx <- stream_curve$tx[1:length(dx)]
  ty <- stream_curve$ty[1:length(dy)]
  nx <- stream_normal$nx[1:length(dx)]
  ny <- stream_normal$ny[1:length(dy)]

  # connection vector between tangent and difference vector
  ux <- dx - tx
  uy <- dy - ty

  # scalar of the connection vector onto the normal
  curvatures <- c(sapply(
    1:length(l),
    FUN = function(t) unlist(geometry::dot(c(ux[t], uy[t]), c(nx[t], ny[t])))
  ), NA)

  # optional: smoothing by Gaussian-weighted average
  if (!is.na(smooth)) {
    curvatures <- smoother::smth.gaussian(curvatures, alpha = smooth)
    
  }
  
  # either return the direction...
  if (direction) {
    # (-1: left turn, 0: NA, +1: right turn)
    dirn <- (2*as.numeric(curvatures < 0)) - 1
    dirn[is.na(dirn)] <- 0
    return(dirn)
  }

  # ... or the curvature
  return(curvatures)
    
}


get_all_curve_measures <- function(
    stream_curve,
    normed = TRUE,
    smooth = NA
    ) {

  # numeric difference
  stream_curve$dx <- c(diff(stream_curve$x), NA)
  stream_curve$dy <- c(diff(stream_curve$y), NA)

  # tangent
  stream_curve <- get_stream_tangent(
    stream_curve,
    normed = normed,
    append = TRUE,
    second = FALSE
  )
  
  # normal
  stream_curve <- get_normal(
    stream_curve,
    normed = normed,
    append = TRUE
  )

  # curvature and curvature direction
  stream_curve$curv <- get_curvature_direction(stream_curve, direction = FALSE, smooth = NA)
  stream_curve$dirn <- get_curvature_direction(stream_curve, direction = TRUE, smooth = NA)
  stream_curve$curv_smth <- get_curvature_direction(stream_curve, direction = FALSE, smooth = smooth)
  stream_curve$dirn_smth <- get_curvature_direction(stream_curve, direction = TRUE, smooth = smooth)

  # head(stream_curve)
  return(stream_curve)

}



test_curve <- get_stream_tangent(
  test_curve,
  normed = FALSE,
  append = TRUE,
  second = TRUE
)

test_curve <- get_normal(
  test_curve,
  normed = FALSE,
  append = TRUE
)

test_curve <- get_all_curve_measures(
  test_curve,
  normed = TRUE,
  smooth = 5
)

knitr::kable(head(test_curve))

# tangent_norm <- function(sc) sqrt((sc$tx**2) + (sc$ty**2))
# print(tangent_norm(stream_tangent))


```

```{r plot-stream-direction-flow}

scale <- 64
x <- test_curve$x
y <- test_curve$y
tx <- test_curve$tx * scale
ty <- test_curve$ty * scale
tx2 <- test_curve$tx2 * scale
ty2 <- test_curve$ty2 * scale
nx <- test_curve$nx * scale
ny <- test_curve$ny * scale
curv <- test_curve$curv
curv_smth <- test_curve$curv_smth
dirn <- test_curve$dirn
dirn_smth <- test_curve$dirn_smth
nx <- nx * dirn_smth
ny <- ny * dirn_smth
nz <- !as.logical(as.integer(nx == 0) * as.integer(ny == 0))
# col <- as.integer(dirn)+1
color <- as.integer(dirn_smth[nz])+3


plot(x, y)
graphics::arrows(x, y, x+tx, y+ty, col = "darkgray", length = 0.1)
# graphics::arrows(x, y, x+nx, y+ny, col = "lightblue", length = 0.1)
# graphics::arrows(x-tx2, y-ty2, x+tx2, y+ty2, col = "lightblue", length = 0.1)
graphics::arrows(
  x[nz], y[nz],
  x[nz] + nx[nz], y[nz] + ny[nz],
  col = color, length = 0.1
)

```

Summary: we calculated

- the tangent (i.e. flow direction)
- the curvature (optionally smoothed)
- the direction (i.e. side, optionally smoothed)


## stream batch processing


```{r stream-data-assembly}
# vhag <- 9574
# segment_rank <- 218821
# unit_id <- "9574_218821"
#
# unit_id <- "47203_84627"

get_stream_curve_properties <- function(unit_id) {

  vhag <- stringr::str_split(unit_id, "_")[[1]][1]
  segment_rank <- as.numeric(stringr::str_split(unit_id, "_")[[1]][2])

  # extract the curve  
  curve <- get_stream_curve(vhag = vhag, segment_rank = segment_rank)

  curve <- get_all_curve_measures(
    curve,
    normed = TRUE,
    smooth = 5
  )

  segment <- curve %>%
    filter(rank == 0) %>%
    select(-rank) %>% 
    mutate(unit_id = unit_id)

  return(segment)
    
}

```


```{r stream-batch}
#| eval: true

stream_list <- stratum_units_grts_aquatic_gw_spsamples_spares %>%
  filter(sample_support_code == "watercourse_segment") %>%
  pull(unit_id)

# for (uid in stream_list) {
#   message(uid)
#   get_stream_curve_properties(uid)
# }

stream_data <- bind_rows(lapply(stream_list, FUN = get_stream_curve_properties))
kableprint(stream_data)
```


Strategy to continue (TODO):

- [X] Per sample point: go into `direction * normal`.
- [X] Mark target area aligned towards upstream.
- [X] Consider also incorporating slope; at least check consistency.

## stream determine target area

With the info aggregated by `get_stream_curve_properties`, we can decide on an alternative placement area.

```{r stream-target-area}
get_stream_target_area <- function(unit_id, offset_m = 8, side_m = 16) {

  # get stream info
  stream_info <- get_stream_curve_properties(unit_id)

  # reference vectors
  segment_point <- stream_info[c("x", "y")]

  # normal, in the direction of curvature
  curvature <- stream_info[["curv_smth"]]
  if(is.na(curvature)) curvature <- stream_info[["curv"]]
  normal_unit_vector <- sign(curvature) * stream_info[c("nx", "ny")]

  # tangent and difference vectors
  diff_unit_vector <- stream_info[c("dx", "dy")]
  diff_unit_vector <- diff_unit_vector / sqrt(sum(diff_unit_vector^2))
  tangent_unit_vector <- stream_info[c("tx", "ty")]

  # check the strenght of the slope in the area
  flow_vector <- calculate_flow_direction(
    sf::st_as_sf(segment_point, coords = c("x", "y"), crs = 31370),
    flow_range = 96,
    flow_cellsize = 16,
    save_plot_filepath = here::here("figures", sprintf("%s.png", unit_id))
  )

  # compare curvature and elevation-slope
  curv_sign <- -1 # normally, we go opposite of curvature direction

  # check whether flow is in direction of the normal, or not
  direction_scalar <- as.matrix(normal_unit_vector) %*% as.matrix(flow_vector)
  same_direction <- 0 < direction_scalar

  if (!same_direction) {
    # we normally go in the direction of curvature
    # except if
    #   - the flow vector magnitude is large
    #   - curvature is low in magnitude
    # heuristics: 2*curvature seems to be more relevant

    flow_magnitude <- sqrt(sum(flow_vector^2))
    if (flow_magnitude > 2 * abs(curvature)) {
      curv_sign <- +1 # if flow projection to normal is large, switch sign
    }
  }
    
  # go around the square
  direction_vector <- tangent_unit_vector
  points <- segment_point + curv_sign * offset_m * normal_unit_vector
  points <- bind_rows(points, points[1, ] - side_m * direction_vector)
  points <- bind_rows(points, points[2, ] + curv_sign * side_m * normal_unit_vector)
  points <- bind_rows(points, points[3, ] + side_m * direction_vector)
  points <- bind_rows(points, points[4, ] - curv_sign * side_m * normal_unit_vector) # back to start

  target <- points %>% sf::st_as_sf(coords = c("x", "y"), crs = 31370)

  target <- st_combine(target) %>% st_cast("POLYGON", warn = FALSE)
  return(sf::st_sf(data.frame(unit_id = unit_id, geom=target)))
}

```


```{r stream-test-curvature-vs-flow}

create_sf_vector <- function(pt, vec, unit_id) {
  line <- as.data.frame(rbind(pt, pt + vec)) %>%
    setNames(c("x", "y")) %>% 
    sf::st_as_sf(coords = c("x", "y"), crs = 31370)
  
  line <- sf::st_sf(st_combine(line) %>% st_cast("LINESTRING"))
  return(sf::st_sf(data.frame(unit_id = unit_id, geom=line)))
}

# TODO try unit_id <- "9574_218856"
# TODO crashing unit_id <- "9574_218829", 837, ...
sample_unit_id <- "9574_218821"
test_targets <- get_stream_target_area(sample_unit_id, offset_m = 10, side_m = 20)

curvs <- NA
flows <- NA
for (i in seq(771, 852, 5)) {
  unit_id <- sprintf("9574_218%03.0f", i)
  # message(unit_id)
  test_targets <- bind_rows(
    test_targets,
    get_stream_target_area(unit_id, offset_m = 10, side_m = 20)
    )

  # flow and curvature
  scale <- 100
  stream_info <- get_stream_curve_properties(unit_id)
  segment_point <- stream_info[c("x", "y")]

  # normal, in the direction of curvature
  curvature <- stream_info[["curv_smth"]]
  if(is.na(curvature)) curvature <- stream_info[["curv"]]
  normal_curvature <- 2*scale * curvature * stream_info[c("nx", "ny")]
  if (any(is.na(curvs))) {
    curvs <- create_sf_vector(segment_point, normal_curvature, unit_id)
  } else {
    curvs <- bind_rows(curvs, create_sf_vector(segment_point, normal_curvature, unit_id))
  }

  # check the strenght of the slope in the area
  flow_vector <- scale * calculate_flow_direction(
    sf::st_as_sf(segment_point, coords = c("x", "y"), crs = 31370),
    flow_range = 128,
    flow_cellsize = 8,
    save_plot_filepath = here::here("figures", sprintf("%s.png", unit_id))
  )

  if (any(is.na(flows))) {
    flows <- create_sf_vector(segment_point, flow_vector, unit_id)
  } else {
    flows <- bind_rows(flows, create_sf_vector(segment_point, flow_vector, unit_id))
  }
  
}

test_curve <- sf::st_as_sf(
  get_stream_curve(vhag = 9574, segment_rank = 218821),
  coords = c("x", "y"),
  crs = 31370
  ) %>%
  filter(rank >= -52, rank < 36) %>% 
  mutate(selected = ((rank - 770) %% 5) == 0)

m1 <- mapview(test_curve, zcol = "selected")
test_targets$label <- "placement target area"
m2 <- mapview(test_targets, col.regions = "red", zcol = "label")

flows$label <- "flow direction"
m3 <- mapview(flows, color = "darkblue", zcol = "label")
curvs$label <- "curvature direction"
m4 <- mapview(curvs, color = "orange", zcol = "label")
m1+m2+m3+m4

```


## Summary: Streams

- Target is placed depending on curvature and elevation/slope.
- Usually, those seem consistent.
- Elevation has to overrule curvature.
- Area is aligned upstream from segment point.


# TODOs

- [X] where do the spaces come from? -> from "inbospatial", hence the name
- [X] flow direction for a point
- target area | `sample_support_code` 
  - [X] for water surfaces
  - [X] streams
  - [ ] springs
- [ ] streams: is it possible to get the stream *width* at a given segment?
- [ ] harden functions (dependencies, weird input, curvature unavailable)
- [ ] flow direction: dependence on buffer area and cell grid size
- [ ] gather functions in package main:
  - `confirm_n2khab_data_consistency()`
  - `calculate_flow_direction(...)`
  - add unit tests for `c("LIMGNK0062", "LIMGNK0055", "LIMGNK0010")` locations (but hardcode xy)
- `rank` in streams seems to be faulty? (see example zig-zag in higher ranks)


to be discussed:

- **water everywhere** 
  - what if there is more water in the target area?
- **non-aquatic aquatics**
  - There are some points which appear not to be wet 
  - e.g. `LIMGNK0062`
  - might have to do with GRTS raster ["partial volumes"]("https://en.wikipedia.org/wiki/Partial_volume_(imaging)").
  - or temporal change (vegetation, eutrophication, drying)
  - also: think of a U-shaped water
- **does size matter?**
  - some vast water bodies (`LIMGNK0055`); will be challenging to get elevation gradient.
  - on the other hand, what is the minimum size? (springs!)
- **go with the flow**
  - does `rank` count upstream or downstream?
  - how far to go away from a stream?
